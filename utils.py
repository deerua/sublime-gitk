import sublime
import os
import subprocess
import re

def get_git_root(path):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä—ñ–Ω—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –¥–ª—è –¥–∞–Ω–æ–≥–æ —à–ª—è—Ö—É"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–ª—è Windows
        startupinfo = None
        if os.name == 'nt':
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        
        git_root = subprocess.check_output(
            ["git", "rev-parse", "--show-toplevel"], 
            cwd=os.path.dirname(path) if os.path.isfile(path) else path,
            stderr=subprocess.STDOUT,
            startupinfo=startupinfo,
            universal_newlines=True
        ).strip()
        
        return git_root
    except subprocess.CalledProcessError:
        sublime.error_message("Directory is not a git repository")
        return None
    except (OSError, IOError) as e:
        sublime.error_message("Git not found. Please ensure it is installed")
        return None

def get_git_path(path):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö —Ñ–∞–π–ª—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–æ—Ä–µ–Ω—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"""
    git_root = get_git_root(path)
    if not git_root:
        return None
    
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    norm_git_root = os.path.normpath(git_root)
    norm_path = os.path.normpath(path)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö
    rel_path = os.path.relpath(norm_path, norm_git_root)
    
    # –ó–∞–º—ñ–Ω—é—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ —Å–ª–µ—à—ñ –Ω–∞ –ø—Ä—è–º—ñ (–¥–ª—è git)
    git_path = rel_path.replace('\\', '/')
    
    return git_path

def get_project_structure(path, depth=None, current_depth=0):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É (–ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∏)"""
    result = []
    
    # –Ø–∫—â–æ —à–ª—è—Ö - —Ü–µ —Ñ–∞–π–ª, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ñ–∞–π–ª—É
    if os.path.isfile(path):
        return [os.path.basename(path)]
    
    # –Ø–∫—â–æ –º–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –≥–ª–∏–±–∏–Ω–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
    if depth is not None and current_depth > depth:
        return []
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    try:
        items = sorted(os.listdir(path))
        
        for item in items:
            item_path = os.path.join(path, item)
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
            prefix = '   ' * current_depth
            
            if os.path.isdir(item_path):
                # –Ø–∫—â–æ —Ü–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è, –¥–æ–¥–∞—î–º–æ —ó—ó –∑ —Å–ª–µ—à–µ–º
                result.append("{0}üìÅ {1}/".format(prefix, item))
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –≤–º—ñ—Å—Ç —Ü—ñ—î—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                children = get_project_structure(item_path, depth, current_depth + 1)
                result.extend(children)
            else:
                # –Ø–∫—â–æ —Ü–µ —Ñ–∞–π–ª, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
                result.append("{0}üìÑ {1}".format(prefix, item))
    
    except (PermissionError, OSError, IOError) as e:
        result.append("Error accessing {0}: {1}".format(path, str(e)))
    
    return result
